jobs:

- job: ${{ parameters.name }}
  pool: ${{ parameters.pool }}
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: python -m pip install --upgrade pip 
    displayName: 'Install dependencies'

  - script: |
      pip install pytest
      cd examples/notebooks
      pytest utilities-test.py --doctest-modules --junitxml=junit/test-results.xml
    displayName: 'pytest'      

  - script: |
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O ~/miniconda.sh  
      bash ~/miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
    condition: eq(variables['Agent.OS'], 'Linux')
    diplayName: 'Install miniconda - Linux'

  - script: |
      wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O ~/miniconda.sh  
      bash ~/miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
    condition: eq(variables['Agent.OS'], 'Darwin')
    diplayName: 'Install miniconda - Darwin'

  - script: |
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Windows-x86_64.exe -O ~/miniconda.exe  
      start /wait "" Miniconda4-latest-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\Miniconda3       
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    diplayName: 'Install miniconda - Windows'

  - script: |
      cd xDeepFM
      # restore environment
      conda env create -f environment.yml
      conda activate xDeepFM-criteo

      pip install papermill
      
      # run notebook
      papermill criteo.ipynb criteo-subsampled.ipynb -p max_rows 10000 -p data_url 'https://marcozocriteodata.blob.core.windows.net/criteo/dac-subsampled.tar.gz'
    displayName: 'notebooks'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()
